{"ast":null,"code":"var _jsxFileName = \"/Users/bean/Dev/training-react/udemy_react_lecture/08-section12-practice/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [showParagraph, setShowParagraph] = useState(false);\n\n  // 함수는 App 컴포넌트가 리렌더링될 때마다 매번 새롭게 다시 생성되게 된다.\n  const toggleParagraphHandler = () => {\n    setShowParagraph(prevShowParagrah => !prevShowParagrah);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n      show: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Show Paragraph!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"eoYUlDKWxWYgikVZpaPr2UN2QyM=\");\n_c = App;\nexport default App;\n\n// useCallback(): 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅\n// 즉, 매번 실행할 때 마다 해당 함수를 재샛ㅇ성할 필요가 없다는걸 알릴 수 있음\n// => 동일한 함수 객체가 메모리의 동일한 위치에 저장되므로 비교 작업이 가능해짐\n// 역할: 우리가 선택한 함수를 리액트의 내부 저장 공간에 저장해서 함수 객체가 실행될 때마다 이를 재사용할 수 있게 해줌\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","DemoOutput","Button","App","showParagraph","setShowParagraph","toggleParagraphHandler","prevShowParagrah"],"sources":["/Users/bean/Dev/training-react/udemy_react_lecture/08-section12-practice/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button\";\n\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false);\n\n  // 함수는 App 컴포넌트가 리렌더링될 때마다 매번 새롭게 다시 생성되게 된다.\n  const toggleParagraphHandler = () => {\n    setShowParagraph((prevShowParagrah) => !prevShowParagrah);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <DemoOutput show={false} />\n      <Button onClick={toggleParagraphHandler}>Show Paragraph!</Button>\n    </div>\n  );\n}\n\nexport default App;\n\n// useCallback(): 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅\n// 즉, 매번 실행할 때 마다 해당 함수를 재샛ㅇ성할 필요가 없다는걸 알릴 수 있음\n// => 동일한 함수 객체가 메모리의 동일한 위치에 저장되므로 비교 작업이 가능해짐\n// 역할: 우리가 선택한 함수를 리액트의 내부 저장 공간에 저장해서 함수 객체가 실행될 때마다 이를 재사용할 수 있게 해줌\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,MAAM,MAAM,+BAA+B;AAAC;AAEnD,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAMO,sBAAsB,GAAG,MAAM;IACnCD,gBAAgB,CAAEE,gBAAgB,IAAK,CAACA,gBAAgB,CAAC;EAC3D,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,UAAU;MAAC,IAAI,EAAE;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3B,QAAC,MAAM;MAAC,OAAO,EAAED,sBAAuB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7D;AAEV;AAAC,GAfQH,GAAG;AAAA,KAAHA,GAAG;AAiBZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}