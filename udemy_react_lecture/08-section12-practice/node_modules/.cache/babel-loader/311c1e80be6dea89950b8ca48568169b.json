{"ast":null,"code":"var _jsxFileName = \"/Users/bean/Dev/training-react/udemy_react_lecture/08-section12-practice/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport DemoList from \"./components/Demo/DemoList\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [showParagraph, setShowParagraph] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n  const [listTitle, setListTitle] = useState(\"My List\");\n  console.log(\"APP Running\");\n\n  // 함수는 App 컴포넌트가 리렌더링될 때마다 매번 새롭게 다시 생성되게 된다.\n  const toggleParagraphHandler = useCallback(() => {\n    if (allowToggle) {\n      setShowParagraph(prevShowParagrah => !prevShowParagrah);\n    }\n  }, [allowToggle]); // allowToggle 변경될 때만 함수 재생성\n\n  const allowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hi there!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoList, {\n      title: listTitle,\n      items: [5, 3, 1, 10, 9]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DemoOutput, {\n      show: showParagraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: allowToggleHandler,\n      children: \"Allow Toggling\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: toggleParagraphHandler,\n      children: \"Toggle Paragraph!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G9l22Nbp6Qk5mDGVhimQMC4Cb9g=\");\n_c = App;\nexport default App;\n\n// useCallback(): 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅\n// 즉, 매번 실행할 때 마다 해당 함수를 재샛ㅇ성할 필요가 없다는걸 알릴 수 있음\n// => 동일한 함수 객체가 메모리의 동일한 위치에 저장되므로 비교 작업이 가능해짐\n// 역할: 우리가 선택한 함수를 리액트의 내부 저장 공간에 저장해서 함수 객체가 실행될 때마다 이를 재사용할 수 있게 해줌\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","DemoList","DemoOutput","Button","App","showParagraph","setShowParagraph","allowToggle","setAllowToggle","listTitle","setListTitle","console","log","toggleParagraphHandler","prevShowParagrah","allowToggleHandler"],"sources":["/Users/bean/Dev/training-react/udemy_react_lecture/08-section12-practice/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport \"./App.css\";\nimport DemoList from \"./components/Demo/DemoList\";\nimport DemoOutput from \"./components/Demo/DemoOutput\";\nimport Button from \"./components/UI/Button/Button\";\n\nfunction App() {\n  const [showParagraph, setShowParagraph] = useState(false);\n  const [allowToggle, setAllowToggle] = useState(false);\n\n  const [listTitle, setListTitle] = useState(\"My List\");\n\n  console.log(\"APP Running\");\n\n  // 함수는 App 컴포넌트가 리렌더링될 때마다 매번 새롭게 다시 생성되게 된다.\n  const toggleParagraphHandler = useCallback(() => {\n    if (allowToggle) {\n      setShowParagraph((prevShowParagrah) => !prevShowParagrah);\n    }\n  }, [allowToggle]); // allowToggle 변경될 때만 함수 재생성\n\n  const allowToggleHandler = () => {\n    setAllowToggle(true);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Hi there!</h1>\n      <DemoList title={listTitle} items={[5, 3, 1, 10, 9]} />\n      <DemoOutput show={showParagraph} />\n      <Button onClick={allowToggleHandler}>Allow Toggling</Button>\n      <Button onClick={toggleParagraphHandler}>Toggle Paragraph!</Button>\n    </div>\n  );\n}\n\nexport default App;\n\n// useCallback(): 컴포넌트 실행 전반에 걸쳐 함수를 저장할 수 있게 하는 훅\n// 즉, 매번 실행할 때 마다 해당 함수를 재샛ㅇ성할 필요가 없다는걸 알릴 수 있음\n// => 동일한 함수 객체가 메모리의 동일한 위치에 저장되므로 비교 작업이 가능해짐\n// 역할: 우리가 선택한 함수를 리액트의 내부 저장 공간에 저장해서 함수 객체가 실행될 때마다 이를 재사용할 수 있게 해줌\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,MAAM,MAAM,+BAA+B;AAAC;AAEnD,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,SAAS,CAAC;EAErDY,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;;EAE1B;EACA,MAAMC,sBAAsB,GAAGb,WAAW,CAAC,MAAM;IAC/C,IAAIO,WAAW,EAAE;MACfD,gBAAgB,CAAEQ,gBAAgB,IAAK,CAACA,gBAAgB,CAAC;IAC3D;EACF,CAAC,EAAE,CAACP,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB,MAAMQ,kBAAkB,GAAG,MAAM;IAC/BP,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,QAAQ;MAAC,KAAK,EAAEC,SAAU;MAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QAAG,eACvD,QAAC,UAAU;MAAC,IAAI,EAAEJ;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACnC,QAAC,MAAM;MAAC,OAAO,EAAEU,kBAAmB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAwB,eAC5D,QAAC,MAAM;MAAC,OAAO,EAAEF,sBAAuB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA2B;EAAA;IAAA;IAAA;IAAA;EAAA,QAC/D;AAEV;AAAC,GA5BQT,GAAG;AAAA,KAAHA,GAAG;AA8BZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}